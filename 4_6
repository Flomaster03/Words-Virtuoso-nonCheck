import java.io.File
import kotlin.random.Random

val namesOfFile = mutableListOf<String>()  // путь + имя файла
lateinit var listOfCandidatesWords: List<String>
lateinit var listOfAllWords: List<String>
lateinit var secretWord: String

fun main(args: Array<String>) {
    val checkedArgs = checkInput(args)
    println(checkedArgs)
    if (checkedArgs == "Words Virtuoso") guessWord()
}

//проверка входного файла и слов, находящихся в нем
fun checkInput(args: Array<String>): String {
    if (args.size != 2) return "Error: Wrong number of arguments."
    for (i in args.indices) {
        if (!args[i].isInTree()) return "Error: The ${if (i == 1) "candidate " else ""}words file ${args[i]} doesn't exist."
    }
    for (i in namesOfFile.indices) {
        val count = namesOfFile[i].findCountOfInvalidWords()
        if (count != 0) return "Error: $count invalid words were found in the ${args[i]} file."
    }
    val countOfWords = countContainWords()
    if (countOfWords > 0) return "Error: $countOfWords candidate words are not included in the ${args[0]} file."
    listOfCandidatesWords = File(namesOfFile[1]).readLines()
    listOfAllWords = File(namesOfFile[0]).readLines()
    secretWord = listOfCandidatesWords[Random.nextInt(0, listOfCandidatesWords.size)]
    return "Words Virtuoso"
}

//проверка пользовательского слова
fun guessWord() {
    while (true) {
        val input = "\nInput a 5-letter word:".toInput()
        if (input == "exit") {
            println("The game is over.")
            break
        }
        val checkedInput = checkInput(input)
        if (checkedInput.isNotEmpty()) {
            println(checkedInput)
            continue
        } else {
            if (isGuess(input)) {
                println("Correct!")
                break
            } else println(processWord(input))
        }
    }
}

//печать строки, сохранение ввода пользователя в переменную и удаление пробелов
fun String.toInput() = println(this).run { readln().lowercase() }.trim()

// проверка, есть ли такой файл в дереве корневого каталога.
fun String.isInTree(): Boolean {
    val rootDir = File(System.getProperty("user.dir")) //корневой каталог
    for (i in rootDir.walkBottomUp()) {
        if (i.name == this) {
            namesOfFile.add(i.toString())  //добавление имени файла с путем к нему в лист
            return true
        }
    }
    return false
}

//подсчет количества неправильных слов в файле
fun String.findCountOfInvalidWords(): Int = File(this).readLines().count { it.isInvalidInput() }

//проверка слова: true - не соответствует, false - валидное слово
fun String.isInvalidInput(): Boolean =
    this.length != 5 || this.lowercase().contains("[^a-z]+".toRegex()) || this.lowercase().toSet().size != 5

// проверка, что все слова - кандидаты имеются в файле с общими словами
fun countContainWords(): Int =
    File(namesOfFile[1]).readLines().let { it.size - File(namesOfFile[0]).readLines().intersect(it.toSet()).size }

//проверка угадывающего слова на валидность
fun checkInput(input: String): String {
    return when {
        input.length != 5 -> "The input isn't a 5-letter word."
        input.contains("[^a-z]+".toRegex()) -> "One or more letters of the input aren't valid."
        input.toSet().size != 5 -> "The input has duplicate letters."
        !listOfAllWords.contains(input) -> "The input word isn't included in my words list."
        else -> ""
    }
}

//проверка, угадал ли слово
fun isGuess(input: String): Boolean = input == secretWord

//сравнение пользовательского слова с секретным и вывод строки с имеющимися совпадениями
fun processWord(input: String): String = input.mapIndexed { i, c ->
    if (c == secretWord[i]) c.uppercase().single() else if (secretWord.contains(c)) c else '_'
}.joinToString("")
